name: create-azure-vm-runners

on:
  workflow_dispatch:
    inputs:
      amount_of_runners:
        description: 'Amount of runners to set up'
        required: true
      post_deployment_script:
        description: 'Path to the post-deployment script'
        required: false

env:
  # Repository to set up the Runner in.
  ACTIONS_RUNNER_ORG: dennisameling
  ACTIONS_RUNNER_REPO: azure-arm64-gh-actions-runner

# The following secrets are required for this workflow to run:
# GITHUB_API_PAT - PAT to create a runner registration token
# AZURE_CREDENTIALS - Credentials for the Azure CLI. It's recommended to set up a resource
#                     group specifically for self-hosted Actions Runners.
#   az ad sp create-for-rbac --name "{YOUR_DESCRIPTIVE_NAME_HERE}" --role contributor \
#     --scopes /subscriptions/{SUBSCRIPTION_ID_HERE}/resourceGroups/{RESOURCE_GROUP_HERE} \
#     --sdk-auth
# AZURE_RESOURCE_GROUP - Resource group to create the runner(s) in
# AZURE_VM_USERNAME - Username of the VM so you can RDP into it
# AZURE_VM_PASSWORD - Password of the VM so you can RDP into it
jobs:
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
    - name: Create matrix for setting up runners in parallel
      id: create-matrix
      run: |
        AMOUNT_OF_RUNNERS="${{ inputs.amount_of_runners }}"
        echo "Going to create $AMOUNT_OF_RUNNERS runners"
        MATRIX="matrix={\"runner_index\":[$(seq -s "," 1 $AMOUNT_OF_RUNNERS)]}"
        echo "Going to use this matrix: $MATRIX"
        echo $MATRIX >> $GITHUB_OUTPUT
  create-runners:
    name: create-runner-${{ matrix.runner_index }}
    needs: create-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
    outputs:
      vm_name: ${{ steps.generate-vm-name.outputs.vm_name }}
    steps:
    - name: Generate VM name
      id: generate-vm-name
      run: |
        VM_NAME="actions-runner-$(date +%Y%m%d%H%M%S%N)"
        echo "Will be using $VM_NAME as the VM name"
        echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
    
    - name: Generate Actions Runner token
      uses: octokit/request-action@v2.x
      id: generate-actions-runner-token
      with:
        route: POST /repos/{owner}/{repo}/actions/runners/registration-token
        owner: ${{ env.ACTIONS_RUNNER_ORG }}
        repo: ${{ env.ACTIONS_RUNNER_REPO }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_API_PAT }}

    - name: Set and mask Actions Runner token for next steps
      run: |
        ACTIONS_RUNNER_TOKEN=${{ fromJson(steps.generate-actions-runner-token.outputs.data).token }}
        echo "::add-mask::$ACTIONS_RUNNER_TOKEN"
        echo ACTIONS_RUNNER_TOKEN=$ACTIONS_RUNNER_TOKEN >> $GITHUB_ENV    
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/arm-deploy@v1
      with:
        resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
        template: ./azure-arm-template.json
        parameters: ./azure-arm-template-example-parameters.json githubActionsRunnerRepo="https://github.com/$ACTIONS_RUNNER_ORG/$ACTIONS_RUNNER_REPO" githubActionsRunnerToken="${{ env.ACTIONS_RUNNER_TOKEN }}" postDeploymentPsScriptUrl="https://raw.githubusercontent.com/dennisameling/azure-arm64-templates/main/post-deployment-script.ps1" virtualMachineName=${{ steps.generate-vm-name.outputs.vm_name }} virtualMachineSize=Standard_D8pls_v5 publicIpAddressName1=${{ steps.generate-vm-name.outputs.vm_name }}-ip adminUsername=${{ secrets.AZURE_VM_USERNAME }} adminPassword=${{ secrets.AZURE_VM_PASSWORD }}
